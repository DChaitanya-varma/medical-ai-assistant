# -*- coding: utf-8 -*-
"""MARK3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FZzMkP5XBM0SECMQ0YH0ZKHCxfJShwqT
"""

# Medical AI Assistant using IBM Granite 3.2-2B
# Run this in Google Colab

# Install required packages
!pip install transformers torch gradio accelerate

import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import gradio as gr
from typing import List, Tuple
import re

# Initialize the model and tokenizer
MODEL_NAME = "ibm-granite/granite-3.2-2b-instruct"

print("Loading IBM Granite 3.2-2B model...")
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model = AutoModelForCausalLM.from_pretrained(
    MODEL_NAME,
    torch_dtype=torch.float16,
    device_map="auto",
    trust_remote_code=True
)

# Add padding token if not present
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

print("Model loaded successfully!")

def generate_response(prompt: str, max_length: int = 256) -> str:
    """Generate concise response using the Granite model"""
    try:
        # Format the prompt for the instruct model with conciseness instruction
        formatted_prompt = f"<|user|>\n{prompt}\n\nProvide a concise, direct answer without unnecessary explanations or introductions.\n<|assistant|>\n"

        # Tokenize input
        inputs = tokenizer(formatted_prompt, return_tensors="pt", padding=True, truncation=True)

        # Move inputs to the same device as model
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

        # Generate response
        with torch.no_grad():
            outputs = model.generate(
                **inputs,
                max_new_tokens=max_length,
                temperature=0.3,  # Lower temperature for more focused responses
                top_p=0.8,
                do_sample=True,
                pad_token_id=tokenizer.pad_token_id,
                eos_token_id=tokenizer.eos_token_id,
                repetition_penalty=1.2
            )

        # Decode and clean response
        response = tokenizer.decode(outputs[0], skip_special_tokens=True)
        # Extract only the assistant's response
        response = response.split("<|assistant|>\n")[-1].strip()

        # Clean up any redundant phrases
        response = re.sub(r'^(Here is|Here are|Based on|According to|The following|This is).*?:', '', response, flags=re.IGNORECASE)
        response = response.strip()

        return response

    except Exception as e:
        return f"Error generating response: {str(e)}"

def dose_recommendation(medicine: str, age: str, weight: str = "", medical_conditions: str = "") -> str:
    """Provide dose recommendations based on medicine and patient information"""

    disclaimer = "\n\n⚠️ Consult your doctor before taking any medication."

    weight_info = f" Weight: {weight}." if weight else ""
    conditions_info = f" Conditions: {medical_conditions}." if medical_conditions else ""

    prompt = f"""Medication: {medicine}. Age: {age}.{weight_info}{conditions_info}

Give only:
• Recommended dose
• Frequency
• Duration
• Key warnings"""

    response = generate_response(prompt)
    return response + disclaimer

def drug_interaction_checker(medications: str) -> str:
    """Check for drug interactions between multiple medications"""

    disclaimer = "\n\n⚠️ Verify with your pharmacist before combining medications."

    prompt = f"""Medications: {medications}

Check interactions and provide only:
• Interaction level (None/Minor/Moderate/Major)
• Specific risks
• Safe use guidelines
• Timing recommendations"""

    response = generate_response(prompt)
    return response + disclaimer

def natural_alternatives(problem_description: str, current_medication: str = "") -> str:
    """Suggest natural alternatives for medical conditions or medications"""

    disclaimer = "\n\n⚠️ Don't replace prescribed medications without consulting your doctor."

    current_med_info = f" Current medication: {current_medication}." if current_medication else ""

    prompt = f"""Health issue: {problem_description}.{current_med_info}

Provide only:
• Top 3 natural remedies
• Recommended dosages
• Foods that help
• Lifestyle changes
• Precautions"""

    response = generate_response(prompt)
    return response + disclaimer

def symptom_analyzer(symptoms: str) -> str:
    """Analyze symptoms and provide safety measures and dietary recommendations"""

    disclaimer = "\n\n⚠️ Seek medical attention for serious symptoms."

    prompt = f"""Symptoms: {symptoms}

Provide only:
• Likely causes (top 3)
• Immediate actions to take
• Foods that help/avoid
• When to see a doctor
• Warning signs"""

    response = generate_response(prompt)
    return response + disclaimer

def prevention_advisor(environment_description: str) -> str:
    """Provide prevention techniques based on environmental factors"""

    disclaimer = "\n\n⚠️ Adapt recommendations to your specific situation."

    prompt = f"""Environment: {environment_description}

Provide only:
• Main health risks
• Prevention methods
• Protective measures
• Dietary support
• Early warning signs"""

    response = generate_response(prompt)
    return response + disclaimer

# Create Gradio interface with enhanced blue-teal theme
with gr.Blocks(
    title="Medical AI Assistant",
    theme=gr.themes.Soft(),
    css="""
    /* Color Variables */
    :root {
        --light-teal: #81D4FA;
        --sky-blue: #4FC3F7;
        --medium-teal: #0288D1;
        --dark-blue: #01579B;
        --white: #FFFFFF;
        --light-bg: #E3F2FD;
        --shadow-color: rgba(1, 87, 155, 0.1);
    }

    /* Main container styling */
    .gradio-container {
        background: linear-gradient(135deg, var(--light-bg) 0%, var(--light-teal) 100%);
        min-height: 100vh;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Header styling */
    .main-header {
        background: linear-gradient(135deg, var(--medium-teal) 0%, var(--dark-blue) 100%);
        color: var(--white);
        padding: 20px;
        border-radius: 15px;
        margin: 15px 0;
        box-shadow: 0 8px 32px var(--shadow-color);
        text-align: center;
    }

    .main-header h1 {
        margin: 0;
        font-size: 2.5em;
        font-weight: 700;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .main-header h3 {
        margin: 10px 0 0 0;
        font-size: 1.2em;
        opacity: 0.9;
        font-weight: 400;
    }

    /* Tab styling */
    .tab-nav button {
        background: linear-gradient(135deg, var(--sky-blue) 0%, var(--medium-teal) 100%) !important;
        color: var(--white) !important;
        border: none !important;
        border-radius: 12px 12px 0 0 !important;
        padding: 15px 20px !important;
        font-weight: 600 !important;
        font-size: 16px !important;
        margin-right: 5px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 4px 15px var(--shadow-color) !important;
    }

    .tab-nav button:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px var(--shadow-color) !important;
        background: linear-gradient(135deg, var(--medium-teal) 0%, var(--dark-blue) 100%) !important;
    }

    .tab-nav button.selected {
        background: linear-gradient(135deg, var(--dark-blue) 0%, var(--medium-teal) 100%) !important;
        transform: translateY(-3px) !important;
        box-shadow: 0 8px 25px var(--shadow-color) !important;
    }

    /* Tab content styling */
    .tabitem {
        background: var(--white) !important;
        border-radius: 0 15px 15px 15px !important;
        padding: 25px !important;
        box-shadow: 0 8px 32px var(--shadow-color) !important;
        border: 2px solid var(--light-teal) !important;
    }

    /* Input field styling */
    .gr-textbox {
        border-radius: 12px !important;
        border: 2px solid var(--light-teal) !important;
        background: var(--white) !important;
        transition: all 0.3s ease !important;
        font-size: 14px !important;
    }

    .gr-textbox:focus {
        border-color: var(--medium-teal) !important;
        box-shadow: 0 0 20px rgba(2, 136, 209, 0.3) !important;
        transform: scale(1.02) !important;
    }

    .gr-textbox label {
        color: var(--dark-blue) !important;
        font-weight: 600 !important;
        font-size: 16px !important;
        margin-bottom: 8px !important;
    }

    /* Button styling */
    .gr-button {
        background: linear-gradient(135deg, var(--sky-blue) 0%, var(--medium-teal) 100%) !important;
        color: var(--white) !important;
        border: none !important;
        border-radius: 12px !important;
        padding: 15px 30px !important;
        font-weight: 600 !important;
        font-size: 16px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 4px 15px var(--shadow-color) !important;
        text-transform: uppercase !important;
        letter-spacing: 1px !important;
    }

    .gr-button:hover {
        background: linear-gradient(135deg, var(--medium-teal) 0%, var(--dark-blue) 100%) !important;
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px var(--shadow-color) !important;
    }

    .gr-button:active {
        transform: translateY(0px) !important;
    }

    /* Output text area styling */
    .gr-textbox[readonly] {
        background: linear-gradient(135deg, var(--light-bg) 0%, var(--light-teal) 20%) !important;
        border: 2px solid var(--medium-teal) !important;
        color: var(--dark-blue) !important;
        font-family: 'Courier New', monospace !important;
        font-size: 14px !important;
        line-height: 1.6 !important;
    }

    /* Warning box styling */
    .warning {
        background: linear-gradient(135deg, #FFF3E0 0%, #FFE0B2 100%) !important;
        border: 2px solid #FF9800 !important;
        border-radius: 15px !important;
        padding: 20px !important;
        margin: 20px 0 !important;
        box-shadow: 0 4px 15px rgba(255, 152, 0, 0.2) !important;
        color: #E65100 !important;
        font-weight: 600 !important;
    }

    /* Section headers */
    .section-header {
        background: linear-gradient(135deg, var(--light-teal) 0%, var(--sky-blue) 100%);
        color: var(--dark-blue);
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0 20px 0;
        font-weight: 600;
        font-size: 18px;
        text-align: center;
        box-shadow: 0 4px 15px var(--shadow-color);
    }

    /* Card-like container for input sections */
    .input-card {
        background: var(--white);
        border-radius: 15px;
        padding: 20px;
        margin: 10px 0;
        box-shadow: 0 4px 20px var(--shadow-color);
        border: 1px solid var(--light-teal);
        transition: all 0.3s ease;
    }

    .input-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px var(--shadow-color);
    }

    /* Row and column spacing */
    .gr-row {
        margin: 15px 0 !important;
    }

    .gr-column {
        padding: 10px !important;
    }

    /* Loading animation */
    @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.7; }
        100% { opacity: 1; }
    }

    .loading {
        animation: pulse 1.5s ease-in-out infinite;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        .main-header h1 {
            font-size: 2em;
        }

        .gr-button {
            padding: 12px 20px !important;
            font-size: 14px !important;
        }

        .tabitem {
            padding: 15px !important;
        }
    }

    /* Medical icons styling */
    .medical-icon {
        display: inline-block;
        font-size: 1.5em;
        margin-right: 10px;
        color: var(--medium-teal);
        text-shadow: 1px 1px 2px var(--shadow-color);
    }
    """
) as demo:

    # Custom header with enhanced styling
    gr.HTML("""
    <div class="main-header">
        <h1>🏥 Medical AI Assistant</h1>
        <h3>Powered by IBM Granite 3.2-2B Instruct Model</h3>
    </div>
    """)

    gr.Markdown("""
    <div style="text-align: center; background: linear-gradient(135deg, #E3F2FD 0%, #81D4FA 50%); padding: 15px; border-radius: 10px; margin: 10px 0; border: 2px solid #4FC3F7;">
        <strong style="color: #01579B; font-size: 16px;">
            This AI assistant provides medical information across 5 key areas.<br>
            <em>Important: All information is for educational purposes only and should not replace professional medical advice.</em>
        </strong>
    </div>
    """)

    with gr.Tabs():

        # Tab 1: Dose Recommendation
        with gr.Tab("💊 Dose Recommendation"):
            gr.HTML('<div class="section-header"><span class="medical-icon">💊</span>Get Personalized Dosage Recommendations</div>')

            with gr.Row():
                with gr.Column():
                    gr.HTML('<div class="input-card">')
                    med_name = gr.Textbox(
                        label="💉 Medicine Name",
                        placeholder="e.g., Paracetamol, Ibuprofen, Amoxicillin",
                        lines=1
                    )
                    patient_age = gr.Textbox(
                        label="👤 Patient Age",
                        placeholder="e.g., 25 years, 6 months, 65 years",
                        lines=1
                    )
                    patient_weight = gr.Textbox(
                        label="⚖️ Weight (optional)",
                        placeholder="e.g., 70 kg, 15 lbs",
                        lines=1
                    )
                    conditions = gr.Textbox(
                        label="🩺 Medical Conditions (optional)",
                        placeholder="e.g., diabetes, kidney disease, allergies",
                        lines=2
                    )
                    dose_btn = gr.Button("🔍 Get Dose Recommendation", variant="primary")
                    gr.HTML('</div>')

                with gr.Column():
                    dose_output = gr.Textbox(
                        label="📋 Dose Recommendation",
                        lines=12,
                        interactive=False
                    )

        # Tab 2: Drug Interactions
        with gr.Tab("⚠️ Drug Interactions"):
            gr.HTML('<div class="section-header"><span class="medical-icon">⚠️</span>Check for Potential Drug Interactions</div>')

            with gr.Row():
                with gr.Column():
                    gr.HTML('<div class="input-card">')
                    medications_list = gr.Textbox(
                        label="💊 List of Medications",
                        placeholder="e.g., Warfarin, Aspirin, Metformin, Lisinopril",
                        lines=4
                    )
                    interaction_btn = gr.Button("🔍 Check Interactions", variant="primary")
                    gr.HTML('</div>')

                with gr.Column():
                    interaction_output = gr.Textbox(
                        label="📊 Interaction Analysis",
                        lines=12,
                        interactive=False
                    )

        # Tab 3: Natural Alternatives
        with gr.Tab("🌿 Natural Alternatives"):
            gr.HTML('<div class="section-header"><span class="medical-icon">🌿</span>Discover Natural Remedies & Alternatives</div>')

            with gr.Row():
                with gr.Column():
                    gr.HTML('<div class="input-card">')
                    health_issue = gr.Textbox(
                        label="🩺 Health Issue/Condition",
                        placeholder="e.g., insomnia, anxiety, high blood pressure, headaches",
                        lines=3
                    )
                    current_med = gr.Textbox(
                        label="💊 Current Medication (optional)",
                        placeholder="e.g., medication you want alternatives for",
                        lines=2
                    )
                    natural_btn = gr.Button("🌱 Find Natural Alternatives", variant="primary")
                    gr.HTML('</div>')

                with gr.Column():
                    natural_output = gr.Textbox(
                        label="🌿 Natural Alternatives",
                        lines=12,
                        interactive=False
                    )

        # Tab 4: Symptom Analysis
        with gr.Tab("🔍 Symptom Analysis"):
            gr.HTML('<div class="section-header"><span class="medical-icon">🔍</span>Analyze Symptoms & Get Safety Recommendations</div>')

            with gr.Row():
                with gr.Column():
                    gr.HTML('<div class="input-card">')
                    symptom_description = gr.Textbox(
                        label="🩺 Describe Your Symptoms",
                        placeholder="e.g., fever, headache, nausea, chest pain, difficulty breathing",
                        lines=4
                    )
                    symptom_btn = gr.Button("🔍 Analyze Symptoms", variant="primary")
                    gr.HTML('</div>')

                with gr.Column():
                    symptom_output = gr.Textbox(
                        label="📋 Symptom Analysis & Recommendations",
                        lines=12,
                        interactive=False
                    )

        # Tab 5: Prevention Advisor
        with gr.Tab("🛡️ Prevention Advisor"):
            gr.HTML('<div class="section-header"><span class="medical-icon">🛡️</span>Get Prevention Advice Based on Your Environment</div>')

            with gr.Row():
                with gr.Column():
                    gr.HTML('<div class="input-card">')
                    environment = gr.Textbox(
                        label="🌍 Describe Your Environment",
                        placeholder="e.g., polluted city, cold climate, office work, construction site, tropical area",
                        lines=4
                    )
                    prevention_btn = gr.Button("🛡️ Get Prevention Advice", variant="primary")
                    gr.HTML('</div>')

                with gr.Column():
                    prevention_output = gr.Textbox(
                        label="📋 Prevention Recommendations",
                        lines=12,
                        interactive=False
                    )

    # Enhanced disclaimer at the bottom
    gr.HTML("""
    <div class="warning" style="margin-top: 30px;">
        <h3 style="margin: 0 0 15px 0; color: #E65100; text-align: center;">
            ⚠️ IMPORTANT MEDICAL DISCLAIMER ⚠️
        </h3>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-top: 15px;">
            <div>
                <h4 style="color: #E65100; margin-bottom: 10px;">🚨 Emergency Situations</h4>
                <p style="margin: 0; line-height: 1.5;">In case of medical emergencies, contact emergency services immediately. Do not rely on AI for urgent medical decisions.</p>
            </div>

            <div>
                <h4 style="color: #E65100; margin-bottom: 10px;">👨‍⚕️ Professional Consultation</h4>
                <p style="margin: 0; line-height: 1.5;">Always consult qualified healthcare professionals. This AI provides educational information only, not medical advice.</p>
            </div>

            <div>
                <h4 style="color: #E65100; margin-bottom: 10px;">💊 Medication Safety</h4>
                <p style="margin: 0; line-height: 1.5;">Verify all medication information with healthcare providers or pharmacists before taking any drugs.</p>
            </div>

            <div>
                <h4 style="color: #E65100; margin-bottom: 10px;">⚖️ Legal Notice</h4>
                <p style="margin: 0; line-height: 1.5;">The developers assume no responsibility for any actions taken based on this AI-generated information.</p>
            </div>
        </div>
    </div>
    """)

    # Connect functions to buttons
    dose_btn.click(
        fn=dose_recommendation,
        inputs=[med_name, patient_age, patient_weight, conditions],
        outputs=dose_output
    )

    interaction_btn.click(
        fn=drug_interaction_checker,
        inputs=[medications_list],
        outputs=interaction_output
    )

    natural_btn.click(
        fn=natural_alternatives,
        inputs=[health_issue, current_med],
        outputs=natural_output
    )

    symptom_btn.click(
        fn=symptom_analyzer,
        inputs=[symptom_description],
        outputs=symptom_output
    )

    prevention_btn.click(
        fn=prevention_advisor,
        inputs=[environment],
        outputs=prevention_output
    )

# Launch the application
if __name__ == "__main__":
    print("Starting Medical AI Assistant...")
    print("Loading interface...")

    # Launch with public link for sharing
    demo.launch(
        share=True,  # Creates public link
        server_port=7860,
        server_name="0.0.0.0",
        show_error=True,
        debug=True
    )